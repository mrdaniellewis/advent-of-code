# frozen_string_literal: true

raw_message = DATA.readline.strip

# Find the binary length of the message
# Must be a better way of this?
$binary_length = ("F" * raw_message.length).to_i(16).to_s(2).length

$message = raw_message.to_i(16)

# puts format("%0#{$binary_length}b", $message)

def shift_message(bits)
  out = $message >> ($binary_length - bits)
  $message -= (out << ($binary_length - bits))
  $binary_length -= bits
  out
end

def literal_type
  literal = ""
  loop do
    part = shift_message(5)

    label = part & 0b10000
    literal += format("%04b", (part - label))

    break if label == 0
  end

  literal.to_i(2)
end

def operator_type
  length_id = shift_message(1)
  parts = []

  if length_id == 0
    length = shift_message(15)

    position = $binary_length
    loop do
      parts << message

      break if position - $binary_length == length
    end
  else
    count = shift_message(11)

    loop do
      parts << message

      break if parts.length == count
    end
  end

  parts
end

def message
  version = shift_message(3)
  type = shift_message(3)
  value = if type == 4
            literal_type
          else
            operator_type
          end
  {
    version: version,
    type: type,
    value: value
  }
end

decoded = message

def version_sum(decoded)
  return decoded[:version] if decoded[:value].is_a?(Integer)

  decoded[:version] + decoded[:value].map { |d| version_sum(d) }.sum
end

puts version_sum(decoded)

__END__

